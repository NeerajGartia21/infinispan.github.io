---
layout: project
title: Introduction
---

.jumbotron
  %h2 Introduction to Infinispan
  %p Distributed in-memory key/value data grid and cache

.col-md-6
  .row.well
    %i.enormous-icon.icon-question-sign.pull-left.icon-2x
    %h3 What is it?
    %p 
    Infinispan is an extremely scalable, highly available key/value data store and data grid platform.
    It is 100% open source, and written in 
    %a{:href => "http://www.oracle.com/technetwork/java/index.html"}Java.
    The purpose of Infinispan is to expose a data structure that is distributed, highly concurrent and designed ground-up to make the most of modern multi-processor and multi-core architectures.
    It is often used as a distributed cache, but also as a NoSQL key/value store or object database.
  %i.enormous-icon.icon-dashboard.pull-left.icon-2x
  %h3 Why would I use it?
  %p
    Most people use Infinispan for one of two reasons. Firstly, as a cache.
    Putting Infinispan in front of your database, disk-based NoSQL store or any part of your system that is a bottleneck can greatly help improve performance.
    Often, however, a simple cache isn't enough - for example if your application is clustered and cache coherency is important to data consistency.
    A
    %i distributed cache
    can greatly help here.
  %p
    Infinispan can also be used as a high-performance NoSQL data store.  In addition to being in memory, Infinispan can also persist data to a more permanent store.  We call this a
    %i cache store.
    Cache stores are pluggable, you can easily write your own, and many already exist for you to use.
    Learn more about cache stores - and existing implementations you can use today - 
    on the 
    %a{:href => "/cache-store-implementations"} cache stores
    section of this website.
  %p
    Yet another common use case is adding clusterability and high availability to frameworks.
    Since Infinispan exposes a distributed data structure, frameworks and libraries that also need to be clustered can easily achieve this by embedding Infinispan and delegating all state management to Infinispan.
    This way, any framework can easily be clustered by letting Infinispan do all the heavy lifting.
  %i.enormous-icon.icon-book.pull-left.icon-2x
  %h3 Where can I learn more?
  %p 
    Visit the
    %a{:href => "/documentation"}Documentation section
    of this website.  Lots of resources - including tutorials, quick start guides, sample code and demos -
    will help get you on your feet in no time.        
  %p
    %a.btn.btn-primary{:href => "/documentation", :role => "button"}
      %i.icon-book.pull-left
      Learn more Infinispan

.col-md-6
  %i.enormous-icon.icon-beaker.pull-left.icon-2x
  %h3 How do I use it?
  %p 
    At its core Infinispan exposes a
    %code Cache 
    interface which extends 
    %code java.util.Map
    It is also optionally is backed by a peer-to-peer network architecture to distribute data efficiently across a cluster of servers.
  %p
    In addition to its core Java API, Infinispan can also be consumed by non-JVM platforms by making use of the
    %a{:href => "/hotrod-clients"} Hot Rod
    protocol, for which client libraries for various platforms exist.
  %i.enormous-icon.icon-exchange.pull-left.icon-2x
  %h3 What about transactions?
  %p
    A heated topic among many NoSQL engines.  Yes, Infinispan is 
    %b
      %i fully
    transactional.  Infinispan supports both 
    %a{:href => "http://en.wikipedia.org/wiki/Java_Transaction_API", :target => "_NEW"} JTA
    as well as 
    %a{:href => "http://en.wikipedia.org/wiki/X/Open_XA", :target => "_NEW"} XA
    standards, and can participate in distributed transactions brokered by a valid JTA transaction manager.
  %p
    Most distributed data stores find that transactions hurt performance.
    This is true in some cases, but we feel that in many other cases, transactions are necessary for many business applications.
    As such, we support transactions but this is 
    %i optional
    and can be disabled for greater performance.
  %i.enormous-icon.icon-hdd.pull-left.icon-2x
  %h3 Can I use it with Hibernate?
  %p 
    %a{:href => "http://www.hibernate.org/", :target => "_NEW"}Hibernate
    exposes a hook for second-level caching when retrieving data from a relational database.
    Infinispan has a Hibernate second-level cache plug-in to speed up your data lookups from a database.
    Learn more about it 
    %a{:href => "/docs/stable/user_guide/user_guide.html#using_infinispan_as_jpa_hibernate_second_level_cache_provider", :target => "_NEW"}here.

  %i.enormous-icon.icon-search.pull-left.icon-2x
  %h3 Can I perform searches?
  %p
    Yes.  Infinispan's primary form of data retrieval is a key lookup (
    %code Cache.get(key)
    ), but we also support powerful indexing and searching over your dataset.
    Learn more about this 
    %a{:href => "/docs/stable/user_guide/user_guide.html#sid-68355061", :target => "_NEW"}here.

  %i.enormous-icon.icon-th-large.pull-left.icon-2x
  %h3 What about Map/Reduce?
  %p
    Even better ! Infinispan allows you to use Java's very powerful 
    %a{:href => "/docs/stable/user_guide/user_guide.html#streams", :target => "_NEW"}Stream API
    which allows code execution, local to the data, in all of our modes, both local and clustered.
    In addition to streams, Infinispan also supports
    %a{:href => "/docs/stable/user_guide/user_guide.html#cluster_executor", :target => "_NEW"}distributed code execution
    where you can move your processing into the grid.                

%h2 Standards
.well
  %h3 JSR 107
  %p
    %a{:href=>"http://jcp.org/en/jsr/detail?id=107"} JSR 107
    (JCACHE: Temporary Caching for Java), is a standard that the Infinispan development team actively participates in and is a part of the expert group.
    Infinispan will implement the JSR 107 APIs once these have been finalized.
    For a preview of the JSR 107 APIs, visit the JSR 107 
    %a{:href=>"https://github.com/jsr107"}on GitHub
    or explore Infinispan's 
    %a{:href=>"/docs/stable/user_guide/user_guide.html#_using_infinispan_as_a_jsr107_jcache_provider"}JSR 107 module.

